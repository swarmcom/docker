#!KAMAILIO

#include local params
import_file "kamailio-local.cfg"

# flags:
#   FLT_ - per transaction (message) flags
#   FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!define FLT_DLG 9
#!define FLT_DLGINFO 10

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########
local.uablock = "sipcli|scanner|VaxSIPUserAgent" desc "block User-agent"
#LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
debug=2
log_stderror=no
memdbg=5
memlog=5
log_facility=LOG_LOCAL0
fork=yes
children=4

disable_tcp=no
auto_aliases=no
enable_tls=no
tcp_connection_lifetime=3605

alias="external_ip:5060"

mpath="/home/user/kamailio/lib64/kamailio/modules"
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "statsc.so"

loadmodule "erlang.so"
loadmodule "auth.so"
loadmodule "dialog.so"
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
#loadmodule "htable.so"
loadmodule "pike.so"

# ----- erlang params ------
modparam("erlang", "cookie", "ClueCon")
modparam("erlang", "erlang_nodename", "reach@reach.ezuce")
modparam("erlang", "cnode_alivename", "kamailio")
modparam("erlang", "cnode_host", "kamailio.ezuce")
# for rpc api
modparam("pv", "shvset", "my_node=s:kamailio@kamailio.ezuce")

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 10)
modparam("pike", "remove_latency", 20)

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
modparam("registrar", "default_expires", 60)
modparam("registrar", "max_expires", 60)
modparam("registrar", "min_expires", 60)
modparam("registrar", "gruu_enabled", 0)

# ----- acc params -----
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
        "src_user=$fU;src_domain=$fd;src_ip=$si;"
        "dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)

modparam("dialog", "enable_stats", 1)
modparam("dialog", "db_mode", 0)
modparam("dialog", "dlg_flag", FLT_DLG)

####### Routing Logic ########

route {
    # per request initial checks

    xlog("L_INFO", "$ci $pr $rm $ou $si:$sp -> $Ri:$Rp\n");
    xlog("L_INFO", "$ci $fu -> $tu\n");

    route(REQINIT);
    route(NATDETECT);

    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    # handle retransmissions
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }

    if (is_method("PUBLISH")) {
        sl_send_reply("404", "Not here");
        exit;
    }

    if (is_method("SUBSCRIBE")) {
        sl_send_reply("404", "Not here");
        exit;
    }

    # handle requests within SIP dialogs
    route(WITHINDLG);

    if (is_method("UPDATE")) {
        xlog("L_INFO", "$ci block update\n");
        send_reply("403", "Dialog does not exist");
        break;
    }

    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }

    if (is_method("INVITE")) {
        if ($rU==$null) {
            # request with no Username in RURI
            sl_send_reply("484","Address Incomplete");
            exit;
        }
        setflag(FLT_ACC); # do accounting
    }

    route(REACH);
    xlog("L_INFO", "$ci no route, drop\n");
}

# Just relay to host
route[RELAY] {
    xlog("L_INFO", "$ci RELAY\n");
    if(is_method("INVITE|BYE|UPDATE|CANCEL|ACK")) {
        setflag(FLT_DLGINFO);
        dlg_manage();
    }
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Per SIP request initial checks
route[REQINIT] {
    if($ua=~$sel(cfg_get.local.uablock)) {
        xlog("L_INFO", "drop for ua $ua from $si:$sp\n");
        exit;
    }
    if (!pike_check_req()) {
        xlog("L_INFO","ALERT: pike block $rm from $fu (IP:$si:$sp)\n");
        exit;
    }
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }
    if(!sanity_check("1511", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (!has_totag()) return;

    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
        route(DLGURI);
        if (is_method("BYE")) {
            setflag(FLT_ACC); # do accounting ...
            setflag(FLT_ACCFAILED); # ... even if the transaction fails
        } else if (is_method("NOTIFY") ) {
            # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
            record_route();
        }
        route(RELAY);
        exit;
    }

    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            xlog("L_INFO", "$ci RELAY ACK\n");
            if (subst('/^(Contact:.*@).*$/\1external_ip:5060;transport=udp/ig')) {
                xlog("L_INFO", "$ci fix media contact\n");
            }
            route(RELAY);
            exit;
        } else {
            xlog("L_INFO", "$ci discard ACK\n");
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}

# Handle SIP registrations
route[REGISTRAR] {
    if(isflagset(FLT_NATS)) {
        setbflag(FLB_NATB);
        setbflag(FLB_NATSIPPING);
    }
    if (!save("location")) {
        sl_reply_error();
    } else {
        $erl_list(keep) = $si;
        $erl_list(keep) = $fd;
        $erl_list(keep) = $fU;
        $erl_list(keep) = $expires(min);
        $erl_list(keep) = $Ri;
        erl_rpc("kamailio", "keep_register", "$erl_list(keep)", "$erl_xbuff(keep_reply)");
    }
    exit;
}

route[LOCATION] {
    if (!lookup("location")) {
        sl_send_reply("404", "Not here");
        exit;
    }
    # when routing via usrloc, log the missed calls also
    if (is_method("INVITE")) {
        setflag(FLT_ACCMISSED);
    }
    route(RELAY);
    exit;
}

route[NATDETECT] {
    force_rport();
    if (nat_uac_test("19")) {
        if (is_method("REGISTER")) {
            fix_nated_register();
        } else {
            if(is_first_hop()) {
                set_contact_alias();
            }
        }
        setflag(FLT_NATS);
    }
    if (has_body("application/sdp") && nat_uac_test("8")) {
        xlog("L_INFO", "$ci fix nated sdp\n");
        fix_nated_sdp("2");
    }
    return;
}

# URI update for dialog requests
route[DLGURI] {
    if(!isdsturiset()) {
        handle_ruri_alias();
    }
    return;
}

# Presence server route (drop)
route[PRESENCE] {
    if(!is_method("PUBLISH|SUBSCRIBE")) {
        return;
    }
    sl_send_reply("404", "Not here");
    exit;
}

route[REACH] {
    if (is_method("REGISTER")) {
        $erl_list(auth) = $fd;
        $erl_list(auth) = $fU;
        $erl_list(auth) = $expires(min);
        $erl_list(auth) = $Ri;
        erl_rpc("kamailio", "auth_register", "$erl_list(auth)", "$erl_xbuff(auth_reply)");
        if (!$erl_xbuff(auth_reply[0])) {
            auth_challenge("$fd", "1");
            exit;
        }
        if (!pv_auth_check("$fd", "$erl_xbuff(auth_reply[1])", "1", "1")) {
            auth_challenge("$fd", "1");
            exit;
        }
        route(REGISTRAR);
    }
    if (is_method("INVITE")) {
        $erl_list(auth) = $rd;
        $erl_list(auth) = $rU;
        $erl_list(auth) = $fd;
        $erl_list(auth) = $fU;
        $erl_list(auth) = $si;
        $erl_list(auth) = $Ri;
        erl_rpc("kamailio", "route_invite", "$erl_list(auth)", "$erl_xbuff(auth_reply)");
        route(AUTH_REPLY);
    }
    return;
}

route[ROUTE_AUTH] {
    $erl_list(req) = $rd;
    $erl_list(req) = $rU;
    $erl_list(req) = $fd;
    $erl_list(req) = $fU;
    $erl_list(req) = $si;
    $erl_list(req) = $Ri;
    erl_rpc("kamailio", "route_auth_invite", "$erl_list(req)", "$erl_xbuff(auth_reply)");
    route(AUTH_REPLY);
}

route[AUTH_REPLY] {
    xlog("L_INFO", "$ci erlang auth reply $erl_xbuff(auth_reply[0])\n");
    switch($erl_xbuff(auth_reply[0])) {
        case 1:
            sl_send_reply("404", "User not found");
            exit;
        case 2:
            if (!pv_auth_check("$fd", "$erl_xbuff(auth_reply[1])", "1", "1")) {
                auth_challenge("$fd", "1");
                exit;
            }
            consume_credentials();
            route(ROUTE_AUTH);
            exit;
        case 3:
            exit;
        case 4:
            sl_send_reply("488","No route");
            exit;
        case 5:
            route(AGENT_TO_AGENT);
            exit;
        case 6:
            route(AGENT_TO_REGISTRAR);
            exit;
        case 7:
            route(AGENT_TO_MEDIA);
            exit;
        case 8:
            route(AGENT_TO_WORLD);
            exit;
        case 15:
            route(MEDIA_TO_AGENT);
            exit;
        case 16:
            route(MEDIA_TO_REGISTRAR);
            exit;
        case 17:
            route(MEDIA_TO_GATEWAY);
            exit;
       case 27:
            route(GATEWAY_TO_MEDIA);
            exit;
       case 37:
            route(WORLD_TO_MEDIA);
            exit;
        default:
            xlog("$ci bad invite auth reply code $erl_xbuff(auth_reply[0])\n");
            sl_send_reply("488", "Server error");
            exit;
    }
}

route[AGENT_TO_AGENT] {
    xlog("L_INFO", "$ci ROUTE: AGENT_TO_AGENT\n");
    route(LOCATION);
}

route[AGENT_TO_MEDIA] {
    xlog("L_INFO", "$ci ROUTE: AGENT_TO_MEDIA\n");
    $ru = "sip:" + $rU + "@" + $erl_xbuff(auth_reply[1]);
    append_hf("X-AUTH-IP: $si\r\n");
    t_on_reply("FIX_MEDIA_SDP");
    route(RELAY);
}

route[AGENT_TO_REGISTRAR] {
    xlog("L_INFO", "$ci ROUTE: AGENT_TO_REGISTRAR\n");
    $ru = "sip:" + $rU + "@" + $erl_xbuff(auth_reply[1]);
    route(RELAY);
}

route[AGENT_TO_WORLD] {
    xlog("L_INFO", "$ci ROUTE: AGENT_TO_WORLD\n");
    route(RELAY);
}

route[MEDIA_TO_AGENT] {
    xlog("L_INFO", "$ci ROUTE: MEDIA_TO_AGENT\n");
    remove_hf("Allow-Events"); 
    remove_hf("X-FS-Support");
    remove_hf("Remote-Party-ID");
    if (subst('/^(Contact:.*@).*$/\1external_ip:5060;transport=udp/ig')) {
        xlog("L_INFO", "$ci fix media contact\n");
    }
    if(has_body("application/sdp")) {
        xlog("L_INFO", "$ci fix media sdp\n");
        fix_nated_sdp("2", "external_ip");
    }
    route(LOCATION);
}

route[MEDIA_TO_MEDIA] {
    xlog("L_INFO", "$ci ROUTE: MEDIA_TO_MEDIA\n");
    route(RELAY);
}

route[MEDIA_TO_REGISTRAR] {
    xlog("L_INFO", "$ci ROUTE: MEDIA_TO_REGISTRAR\n");
    route(RELAY);
}

route[MEDIA_TO_GATEWAY] {
    xlog("L_INFO", "$ci ROUTE: MEDIA_TO_GATEWAY\n");
    if(has_body("application/sdp")) {
        xlog("L_INFO", "$ci fix media sdp\n");
        fix_nated_sdp("2", "external_ip");
    }
    route(RELAY);
}

route[MEDIA_TO_WORLD] {
    xlog("L_INFO", "$ci ROUTE: MEDIA_TO_WORLD\n");
    if(has_body("application/sdp")) {
        xlog("L_INFO", "$ci fix media sdp\n");
        fix_nated_sdp("2", "external_ip");
    }
    route(RELAY);
}

route[WORLD_TO_MEDIA] {
    xlog("L_INFO", "$ci ROUTE: WORLD_TO_MEDIA\n");
    $ru = "sip:" + $rU + "@" + $erl_xbuff(auth_reply[1]);
    append_hf("X-AUTH-IP: $si\r\n");
    t_on_reply("FIX_MEDIA_SDP");
    route(RELAY);
}

route[GATEWAY_TO_MEDIA] {
    xlog("L_INFO", "$ci ROUTE: GATEWAY_TO_MEDIA\n");
    $ru = "sip:" + $rU + "@" + $erl_xbuff(auth_reply[1]);
    append_hf("X-AUTH-IP: $si\r\n");
    t_on_reply("FIX_MEDIA_SDP");
    route(RELAY);
}

event_route[usrloc:contact-expired] {
    $erl_list(expired) = $ulc(exp=>domain);
    $erl_list(expired) = $ulc(exp=>aor);
    erl_rpc("kamailio", "expired", "$erl_list(expired)", "$erl_xbuff(expired_reply)");
}

event_route[dialog:start] {
    $erl_list(dlg) = $rd;
    $erl_list(dlg) = $rU;
    $erl_list(dlg) = $dlg(to_uri);
    $erl_list(dlg) = $si;
    $erl_list(dlg) = $fd;
    $erl_list(dlg) = $fU;
    $erl_list(dlg) = $dlg(callid);
    erl_rpc("kamailio", "dialog_start", "$erl_list(dlg)", "$erl_xbuff(dlg_reply)");
}

event_route[dialog:end] {
    $erl_list(dlg) = $rd;
    $erl_list(dlg) = $rU;
    $erl_list(dlg) = $dlg(to_uri);
    $erl_list(dlg) = $si;
    $erl_list(dlg) = $fd;
    $erl_list(dlg) = $fU;
    $erl_list(dlg) = $dlg(callid);
    erl_rpc("kamailio", "dialog_end", "$erl_list(dlg)", "$erl_xbuff(dlg_reply)");
}

event_route[dialog:failed] {
    $erl_list(dlg) = $rd;
    $erl_list(dlg) = $rU;
    $erl_list(dlg) = $dlg(to_uri);
    $erl_list(dlg) = $si;
    $erl_list(dlg) = $fd;
    $erl_list(dlg) = $fU;
    $erl_list(dlg) = $dlg(callid);
    erl_rpc("kamailio", "dialog_failed", "$erl_list(dlg)", "$erl_xbuff(dlg_reply)");
}

onreply_route {
    xlog("L_INFO", "$ci $rm REPLY ROUTE\n");
    if (nat_uac_test("1")) {
        fix_nated_contact();
    }
    if (nat_uac_test("8") && has_body("application/sdp")) {
        fix_nated_sdp("2");
    }
}

onreply_route[FIX_MEDIA_SDP] {
    xlog("L_INFO", "$ci $rm MEDIA REPLY ROUTE\n");
    if(has_body("application/sdp")) {
        fix_nated_sdp("2", "external_ip");
    }
}
