#!KAMAILIO

#include local params
port=5060

####### Global Parameters #########
local.uablock = "sipcli|scanner|VaxSIPUserAgent" desc "block User-agent"
#LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
debug=3
log_stderror=no
memdbg=5
memlog=5
log_facility=LOG_LOCAL0
fork=yes
children=4

/* uncomment the next line to disable TCP (default on) */
disable_tcp=yes
auto_aliases=no

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605

####### Modules Section ########
mpath="/home/user/kamailio/lib64/kamailio/modules"

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

loadmodule "erlang.so"
loadmodule "dispatcher.so"
loadmodule "auth.so"
#loadmodule "domain.so"
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
#loadmodule "htable.so"
loadmodule "pike.so"

# ----- erlang params ------
modparam("erlang", "cookie", "ClueCon")
modparam("erlang", "erlang_nodename", "reach@reach.ezuce")
modparam("erlang", "cnode_alivename", "kamailio")
modparam("erlang", "cnode_host", "kamailio.ezuce")

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

#######  module-specific parameters #######
modparam("dispatcher", "list_file", "/home/user/etc/dispatcher.list")
modparam("dispatcher", "force_dst", 1)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(i:271)")
modparam("dispatcher", "grp_avp", "$avp(i:272)")
modparam("dispatcher", "cnt_avp", "$avp(i:273)")
modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 10)
modparam("pike", "remove_latency", 20)

# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 5000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 10000)
# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

####### Routing Logic ########

route {
    # Handle flood
    if($ua=~$sel(cfg_get.local.uablock)) {
        xlog("L_INFO", "drop for ua $ua from $si");
        exit;
    }
    # Handle more flood
    if (!pike_check_req()) {
        xlog("L_INFO","ALERT: pike block $rm from $fu (IP:$si:$sp)\n");
        exit;
    }
    # per request initial checks
    route(REQINIT);
    # handle requests within SIP dialogs
    route(WITHINDLG);
    ### only initial requests (no To tag)
    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }
    t_check_trans();
    # record routing for dialog forming requests (in case they are routed) - remove preloaded route headers
    remove_hf("Route");
    record_route();
    # handle presence related requests
    route(PRESENCE);
    route(NATDETECT);
    # dispatch destinations
    route(DISPATCH);
    # Realy dest
    route(RELAY);
}

# Just relay to host
route[RELAY] {
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Per SIP request initial checks
route[REQINIT] {
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }
    if(!sanity_check("1511", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (has_totag()) {
        # sequential request withing a dialog should take the path determined by record-routing
        if (loose_route()) {
            route(RELAY);
        }
        else {
            if (is_method("SUBSCRIBE") && uri == myself) {
                # in-dialog subscribe requests
                route(PRESENCE);
                exit;
            }
            if ( is_method("ACK") ) {
                if ( t_check_trans() ) {
                    # non loose-route, but stateful ACK; must be ACK after a 487 or e.g. 404 from upstream server
                    t_relay();
                    exit;
                } else {
                    # ACK without matching transaction ... ignore and discard.
                    exit;
                }
            }
            sl_send_reply("404","Not here");
        }
        exit;
    }
}

# Fixing contact for nated subscribers in REGISTER
route[NATDETECT] {
    force_rport();
    if (is_method("REGISTER")) {
         fix_nated_contact();
    }
    return;
}

# Presence server route (drop)
route[PRESENCE] {
    if(!is_method("PUBLISH|SUBSCRIBE"))
    return;
    sl_send_reply("404", "Not here");
    exit;
}

# Dispatch requests
route[DISPATCH] {
    #dispatching only requests sent for this host (alias)
    if (uri==myself) {
        #hash over callid
        if(!ds_select_dst("1", "0")) {
            send_reply("404", "No destination");
            exit;
        }
        t_on_failure("RTF_DISPATCH");
    }
    return;
}

# Failover dispatch
failure_route[RTF_DISPATCH] {
    if (t_is_canceled()) {
        exit;
    }
    # next DST - only for 500 or local timeout
    if (t_check_status("500") or (t_branch_timeout() and !t_branch_replied())) {
        if(ds_next_dst()) {
            t_on_failure("RTF_DISPATCH");
            route(RELAY);
            exit;
        }
    }
}
