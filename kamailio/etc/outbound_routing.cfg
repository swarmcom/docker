# Outbound request routing logic
route[OUTBOUND] {
    
    # route(OUT_NATDETECT);

    # request belongs to established dialog?
    if (has_totag()) {
        route(OUT_WITHINDLG); 
    } # ... no, it is an inital request
    else {
        route(OUT_REACH);
    }
    

    # # this line is perhaps not needed here
    # remove_hf("Route");

    # if (is_method("INVITE|SUBSCRIBE")) {
    #     record_route();
    # }

    # route(REACH);
    dbg_sip_msg();
    exit;
}

route[OUT_NATDETECT] {
    force_rport();
    if (nat_uac_test("3")) {
        # we should not have any REGISTER requests from inside - yet
        if (is_method("REGISTER")) {
            xinfo("$ci $si:$sp $rm NATDETECT fix nated register\n");
            fix_nated_register();
        } else {
            if(is_first_hop()) {
                xinfo("$ci $si:$sp $rm NATDETECT set contact alias\n");
                set_contact_alias();
            }
        }
        setflag(FLT_NATS);
    }
    if (has_body("application/sdp") && nat_uac_test("8")) {
        xinfo("$ci $si:$sp $rm NATDETECT fix nated sdp\n");
        fix_nated_sdp("10", IP_EXTERNAL_STRING);
    }

    # dbg_sip_msg();
    return;
}

route[OUT_WITHINDLG] {
    MACRO_LOG_INDIALOG_OUTGOING_REQUEST
#!ifdef WITH_PACKETS    
    MACRO_LOG_FULL_REQUEST_PACKET
#!endif
    if (loose_route()) {
        xinfo("[ $rm ] LOOSE ROUTE to $(du{s.select,0,;}) $ru\n");
        if(!isdsturiset()) {
            handle_ruri_alias();
        }
        if (is_method("NOTIFY")) {
            xinfo("$rm NOTIFY record route\n");
            record_route();
        }
        # outbound reinvite - most probably hold/unhold
        if (is_method("INVITE")) {
            xinfo("$rm REINVITE\n");
            t_on_reply("REPLY_FROM_WORLD");
            route(MEDIA_TO_WORLD);
        }
        route(RELAY);
    } else {
       if (t_check_trans()) {
            xinfo("$rm TRANS RELAY $du\n");
            route(RELAY);
       }
    } 
}

# Route path for inital outbound requests. It asks Reach via erl_rpc what to do
# with the request
route[OUT_REACH] {
    MACRO_LOG_OUTGOING_REQUEST
#!ifdef WITH_PACKETS    
    MACRO_LOG_FULL_REQUEST_PACKET
#!endif
    # this line is perhaps not needed here
    remove_hf("Route");

    if (is_method("REGISTER")) {
        
        $erl_list(auth) = $fd;
        $erl_list(auth) = $fU;
        $erl_list(auth) = $expires(min);
        $erl_list(auth) = "internal_ip";
        erl_rpc("kamailio", "auth_register", "$erl_list(auth)", "$erl_xbuff(reach_reply)");
        if (!$erl_xbuff(reach_reply[0])) {
            auth_challenge("$fd", "1");
            exit;
        }
        if (!pv_auth_check("$fd", "$erl_xbuff(reach_reply[1])", "1", "1")) {
            auth_challenge("$fd", "1");
            exit;
        }
        route(REGISTRAR);
    }
    else if (is_method("INVITE")) {
        
        record_route();

        $erl_list(auth) = $rd;
        $erl_list(auth) = $rU;
        $erl_list(auth) = $fd;
        $erl_list(auth) = $fU;
        $erl_list(auth) = $si;
        $erl_list(auth) = IP_INTERNAL_STRING;
        erl_rpc("kamailio", "route_invite", "$erl_list(auth)", "$erl_xbuff(reach_reply)");
        route(REACH_REPLY);
    }
    else if (is_method("SUBSCRIBE")) {
        record_route();
    }
    else if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
    }
    else {
        # this should never happen, all unsupported methods should be already
        # filtered out by route[REQINIT]
        xerr("$rm BAD METHOD\n");
        sl_send_reply("488", "Server error");
    }
    return;

    # if (is_method("INVITE|SUBSCRIBE")) {
    #     record_route();
    # }
    # if (is_method("REGISTER")) {
    #     $erl_list(auth) = $fd;
    #     $erl_list(auth) = $fU;
    #     $erl_list(auth) = $expires(min);
    #     $erl_list(auth) = "internal_ip";
    #     erl_rpc("kamailio", "auth_register", "$erl_list(auth)", "$erl_xbuff(reach_reply)");
    #     if (!$erl_xbuff(reach_reply[0])) {
    #         auth_challenge("$fd", "1");
    #         exit;
    #     }
    #     if (!pv_auth_check("$fd", "$erl_xbuff(reach_reply[1])", "1", "1")) {
    #         auth_challenge("$fd", "1");
    #         exit;
    #     }
    #     route(REGISTRAR);
    # }
    # if (is_method("INVITE")) {
    #     $erl_list(auth) = $rd;
    #     $erl_list(auth) = $rU;
    #     $erl_list(auth) = $fd;
    #     $erl_list(auth) = $fU;
    #     $erl_list(auth) = $si;
    #     $erl_list(auth) = @cfg_get.interface.ip_internal;
    #     erl_rpc("kamailio", "route_invite", "$erl_list(auth)", "$erl_xbuff(reach_reply)");
    #     route(REACH_REPLY);
    # }
    # return;
}
