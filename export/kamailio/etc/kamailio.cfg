#!KAMAILIO

#!define WITH_PACKETS
# flags:
#   FLT_ - per transaction (message) flags
#   FLB_ - per branch flags
# !define FLT_ACC 1
# !define FLT_ACCMISSED 2
# !define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!define FLT_DLG 9
# --- NOT NEEDED DELETE_ME ---
#!define FLT_DLGINFO 10     

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

#!define DLG_FROM_MEDIA 10
#!define DLG_TO_MEDIA 11
#!define FLT_SKIP_SDP 10


#!define IP_INTERNAL internal_ip
#!define IP_INTERNAL_STRING "internal_ip"
#!define IP_EXTERNAL external_ip
#!define IP_EXTERNAL_STRING "external_ip"

# !define LOG_INCOMING_REPLY xinfo("$C(sw) REPLY $C(xx) <--- $C(sb) $rs $rr $C(xx)\n");
#!define LOG_INCOMING_REPLY xinfo("$C(bb)[$C(sb) $rs $rr $C(bb)]$C(xx) <--- \n");
#!define LOG_OUTGOING_REPLY xinfo("$C(bb)[$C(sb) $rs $rr $C(bb)]$C(xx) ---> \n");
# !define MACRO_LOG_OUTGOING_REQUEST xnotice("$C(sw) REQUEST $C(xx) ---> $C(sg) $rm $C(gx) $fu -> $tu $C(xx)| $ua\n");
#!define MACRO_LOG_OUTGOING_REQUEST xnotice("$C(gg)[$C(sg) $rm $C(gg)]$C(xx) ---> $C(gx)$fu -> $tu $C(xx)| $ua\n");
#!define MACRO_LOG_INCOMING_REQUEST xnotice("$C(gg)[$C(sg) $rm $C(gg)]$C(xx) <--- $C(gx)$fu -> $tu $C(xx)| $ua\n");

# !define MACRO_LOG_INDIALOG_OUTGOING_REQUEST xinfo("$C(wb) D $C(sw) REQUEST $C(xx) ---> $C(sg) $rm $C(gx) $fu -> $tu $C(xx)| $ua\n");
#!define MACRO_LOG_INDIALOG_OUTGOING_REQUEST xinfo("$C(gg)[$C(sg) $rm $C(gg)]$C(bb)[$C(wb)D$C(bb)]$C(xx) ---> $C(gx)$fu -> $tu $C(xx)| $ua\n");
#!define MACRO_LOG_INDIALOG_INCOMING_REQUEST xinfo("$C(gg)[$C(sg) $rm $C(gg)]$C(bb)[$C(wb)D$C(bb)]$C(xx) <--- $C(gx)$fu -> $tu $C(xx)| $ua\n");

#!define MACRO_LOG_FULL_REPLY_PACKET xinfo("\n\n$C(bx)$mb$C(xx)\n");
#!define MACRO_LOG_FULL_REQUEST_PACKET xinfo("\n\n$C(gx)$mb$C(xx)\n");

#!define MACRO_LOG_REACH_ROUTE_BLOCK xinfo("[ $rm ] REACH ROUTE $C(sy) $var(block_name) $C(xx)\n");
####### Global Parameters #########
local.uablock = "sipcli|scanner|VaxSIPUserAgent|sundayddr|pplsip|sipscan|sipvicious|sipptk" desc "block User-agent"
local.fix_inbound_nated_sdp=no

interface.ip_internal = "internal_ip" desc "internal Kam interface"
interface.ip_external = "external_ip" desc "external Kam interface"

#LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
debug=2
log_stderror=yes
log_prefix="$C(sc) $mt $C(sy) $rm $C(yx) $proto:$si:$sp | $ci |$C(xx)"
mhomed=1
memdbg=5
memlog=5
log_facility=LOG_LOCAL0
fork=yes
children=4

# import_file "kamailio-local.cfg"
listen=tcp:eth0:5060 advertise IP_EXTERNAL:5060
listen=udp:eth0:5060 advertise IP_EXTERNAL:5060
listen=udp:eth1:5080 # advertise IP_EXTERNAL:5080

alias=IP_EXTERNAL

disable_tcp=no
auto_aliases=no
enable_tls=no
tcp_connection_lifetime=3605

mpath="/home/user/kamailio/lib64/kamailio/modules"
loadmodule "debugger.so"
loadmodule "outbound.so"
loadmodule "stun.so"
loadmodule "path.so"
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "statsc.so"

loadmodule "erlang.so"
loadmodule "auth.so"
loadmodule "dialog.so"
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
#loadmodule "htable.so"
loadmodule "pike.so"

# ----- debugger params ------
modparam("debugger", "cfgtrace", 0)

# ----- erlang params ------
modparam("erlang", "cookie", "ClueCon")
modparam("erlang", "erlang_nodename", "reach@reach.ezuce")
modparam("erlang", "cnode_alivename", "kamailio")
modparam("erlang", "cnode_host", "kamailio.ezuce")
# for rpc api
modparam("pv", "shvset", "my_node=s:kamailio@kamailio.ezuce")
modparam("pv", "shvset", "ip_int=s:internal_ip")
modparam("pv", "shvset", "ip_ext=s:external_ip")

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 100)
modparam("pike", "remove_latency", 20)

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)
modparam("rr", "enable_double_rr", 2)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
modparam("registrar", "default_expires", 1800)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "min_expires", 600)
modparam("registrar", "gruu_enabled", 1)
modparam("registrar", "outbound_mode", 1)
modparam("registrar", "regid_mode", 1)
modparam("registrar", "path_mode", 1)
modparam("registrar", "use_path", 1)

# ----- acc params -----
# modparam("acc", "early_media", 0)
# modparam("acc", "report_ack", 0)
# modparam("acc", "report_cancels", 0)
# modparam("acc", "detect_direction", 0)
# modparam("acc", "log_flag", FLT_ACC)
# modparam("acc", "log_missed_flag", FLT_ACCMISSED)
# modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@ezuce.com")
modparam("nathelper", "append_sdp_oldmediaip", 0)

modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)

modparam("dialog", "enable_stats", 1)
modparam("dialog", "db_mode", 0)
# this must be set, even if not used anymore, otherwise dialog
# module would not load
modparam("dialog", "dlg_flag", FLT_DLG)

modparam("xlog", "force_color", 0)
modparam("xlog", "prefix", "")

include_file "outbound_routing.cfg"
include_file "inbound_routing.cfg"

####### Routing Logic ########

# Main SIP request routing logic
request_route {
    
    route(REQINIT);

    force_rport();

    if ($Ri == IP_INTERNAL_STRING) {
        route(OUTBOUND);
        #xinfo("OUTBOUND TRANSACTION dst_ip\n");
        #setflag(FLAG_FROM_SWITCH);
    } else {
        route(INBOUND);
        # xnotice("$C(rx)INBOUND $rm | $fu -> $tu UA:$ua$C(xx) [$ci]\n");
        #setflag(FLAG_FROM_USER);
    }
    #exit;

    # route(NATDETECT);

    # if (is_method("CANCEL")) {
    #     if (t_check_trans()) {
    #         route(RELAY);
    #     }
    #     exit;
    # }

    # route(WITHINDLG);

    # remove_hf("Route");
    # if (is_method("INVITE|SUBSCRIBE")) {
    #     record_route();
    # }

    # if (is_method("INVITE")) {
    #     if ($rU==$null) {
    #         # request with no Username in RURI
    #         sl_send_reply("484","Address Incomplete");
    #         exit;
    #     }
    #     setflag(FLT_ACC); # do accounting
    # }

    # route(REACH);
    
    # xinfo("$ci $si:$sp $rm DROP: no route\n");
    # send_reply("403", "No route");
}

# this is the last route path before message is sent to
# its destination 
route[RELAY] {
    # this checks if we've already set any onreply_route in
    # previous routing blocks, if not it sets the default
    # route for replies: onreply_route[REPLY_FROM_WORLD]
    if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("onreply_route")) {
            t_on_reply("REPLY_FROM_WORLD");
        }
    }

    # if(is_method("INVITE|BYE|UPDATE|CANCEL|ACK")) {
    if(is_method("INVITE")) {
        # setflag(FLT_DLGINFO);   NOT NEEDED DELETE_ME
        dlg_manage();
    }

    if (is_method("UPDATE") && dlg_isflagset(DLG_TO_MEDIA)) {
        if(has_body("application/sdp")) {
            xinfo("$ci $si:$sp $rm RELAY fix_media_sdp\n");
            fix_nated_sdp("2", "external_ip");
        }
    }

    # UPDATE from MEDIA
    if (is_method("UPDATE") && dlg_isflagset(DLG_FROM_MEDIA)) {
        if(has_body("application/sdp")) {
            xinfo("$ci $si:$sp $rm MEDIA_TO_AGENT fix_media_sdp\n");
            setflag(FLT_SKIP_SDP);
            fix_nated_sdp("2", "external_ip");
        }
    }
    
    if (!t_relay()) {
        xinfo("[ $rm ] RELAY FAILURE $du $ru\n");
        sl_reply_error();
    } else {
        # for ACK we never return here from t_relay() :(
        xinfo("[ $rm ] RELAY to $du $ru\n");
    }
    
    exit;
}

# Per SIP request initial checks
route[REQINIT] {
    if($ua=~$sel(cfg_get.local.uablock)) {
        xinfo("DROP $rm $fu -> $tu by UA match [$ua]\n");
        exit;
    }
    if (!pike_check_req()) {
        xinfo("$ci $si:$sp PIKE block\n");
        exit;
    }
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }
    if(!sanity_check("1511", "7")) {
        xinfo("$ci $si:$sp Malformed SIP message\n");
        exit;
    }
    if(is_method("OPTIONS")) {
        sl_send_reply("200","Keepalive");
        exit;
    }
    if (is_method("PUBLISH|SUBSCRIBE")) {
        sl_send_reply("404", "Not here");
        exit;
    }
}

route[WITHINDLG] {

    if (loose_route()) {
        xinfo("[ $rm ] LOOSE ROUTE to $(du{s.select,0,;}) $ru\n");
        if(!isdsturiset()) {
            handle_ruri_alias();
        }
        if (is_method("NOTIFY")) {
            xinfo("$rm NOTIFY record route\n");
            record_route();
        }
        # reinvite from an agent
        if (is_method("INVITE") && dlg_isflagset(DLG_FROM_MEDIA)) {
            xinfo("$rm REINVITE\n");
            t_on_reply("REPLY_FROM_MEDIA");
        }
        route(RELAY);
    } else {
       if (t_check_trans()) {
            xinfo("$rm TRANS RELAY $du\n");
            route(RELAY);
       }
    }
}

# Handle SIP registrations
route[REGISTRAR] {
    if(isflagset(FLT_NATS)) {
        setbflag(FLB_NATB);
        setbflag(FLB_NATSIPPING);
    }
    if (!save("location")) {
        sl_reply_error();
    } else {
        $erl_list(keep) = $si;
        $erl_list(keep) = $fd;
        $erl_list(keep) = $fU;
        $erl_list(keep) = $expires(min);
        $erl_list(keep) = "internal_ip";
        erl_rpc("kamailio", "keep_register", "$erl_list(keep)", "$erl_xbuff(keep_reply)");
    }
    exit;
}

route[LOCATION] {
    if (!lookup("location")) {
        sl_send_reply("404", "Not here");
        exit;
    }
    # when routing via usrloc, log the missed calls also
    # if (is_method("INVITE")) {
    #     setflag(FLT_ACCMISSED);
    # }
    route(RELAY);
    exit;
}

route[NATDETECT] {
    force_rport();
    if (nat_uac_test("3")) {
        if (is_method("REGISTER")) {
            xinfo("$ci $si:$sp $rm NATDETECT fix nated register\n");
            fix_nated_register();
        } else {
            if(is_first_hop()) {
                xinfo("$ci $si:$sp $rm NATDETECT set contact alias\n");
                set_contact_alias();
            }
        }
        setflag(FLT_NATS);
    }
    if (has_body("application/sdp") && nat_uac_test("8") && $sel(cfg_get.local.fix_inbound_nated_sdp)) {
        xinfo("$ci $si:$sp $rm NATDETECT fix nated sdp\n");
        fix_nated_sdp("2");
    }
    return;
}

# Presence server route (drop)
route[PRESENCE] {
    if(!is_method("PUBLISH|SUBSCRIBE")) {
        return;
    }
    sl_send_reply("404", "Not here");
    exit;
}

route[REACH] {
    if (is_method("REGISTER")) {
        $erl_list(auth) = $fd;
        $erl_list(auth) = $fU;
        $erl_list(auth) = $expires(min);
        $erl_list(auth) = "internal_ip";
        erl_rpc("kamailio", "auth_register", "$erl_list(auth)", "$erl_xbuff(reach_reply)");
        if (!$erl_xbuff(reach_reply[0])) {
            auth_challenge("$fd", "1");
            exit;
        }
        if (!pv_auth_check("$fd", "$erl_xbuff(reach_reply[1])", "1", "1")) {
            auth_challenge("$fd", "1");
            exit;
        }
        route(REGISTRAR);
    }
    if (is_method("INVITE")) {
        $erl_list(auth) = $rd;
        $erl_list(auth) = $rU;
        $erl_list(auth) = $fd;
        $erl_list(auth) = $fU;
        $erl_list(auth) = $si;
        $erl_list(auth) = IP_INTERNAL_STRING;
        erl_rpc("kamailio", "route_invite", "$erl_list(auth)", "$erl_xbuff(reach_reply)");
        route(REACH_REPLY);
    }
    return;
}

route[ROUTE_AUTH] {
    $erl_list(req) = $rd;
    $erl_list(req) = $rU;
    $erl_list(req) = $fd;
    $erl_list(req) = $fU;
    $erl_list(req) = $si;
    $erl_list(req) = IP_INTERNAL_STRING;
    erl_rpc("kamailio", "route_auth_invite", "$erl_list(req)", "$erl_xbuff(reach_reply)");
    route(REACH_REPLY);
}

# Common route path for both, in and out, INVITEs. Reach node returns number code
# in $erl_xbuff(reach_reply[0]) which let us decide about further route path
route[REACH_REPLY] {
    # xinfo("$C(sw) REACH_REPLY $C(xx) reply code: $erl_xbuff(reach_reply[0]) [$ci]\n");
    switch($erl_xbuff(reach_reply[0])) {
        case 1:
            sl_send_reply("404", "User not found");
            exit;
        case 2:
            if (!pv_auth_check("$fd", "$erl_xbuff(reach_reply[1])", "1", "1")) {
                auth_challenge("$fd", "1");
                exit;
            }
            consume_credentials();
            route(ROUTE_AUTH);
            exit;
        case 3:
            exit;
        case 4:
            sl_send_reply("488","No route");
            exit;
        case 5:
            route(AGENT_TO_AGENT);
            exit;
        case 6:
            route(AGENT_TO_REGISTRAR);
            exit;
        case 7:
            route(AGENT_TO_MEDIA);
            exit;
        case 8:
            route(AGENT_TO_WORLD);
            exit;
        case 15:
            route(MEDIA_TO_AGENT);
            exit;
        case 16:
            route(MEDIA_TO_AGENT);
            exit;
        case 17:
            route(MEDIA_TO_GATEWAY);
            exit;
        case 18:
            route(MEDIA_TO_WORLD);
            exit;
       case 27:
            route(GATEWAY_TO_MEDIA);
            exit;
       case 37:
            route(WORLD_TO_MEDIA);
            exit;
        default:
            xinfo("$rm BAD INVITE | reachme reply code: $erl_xbuff(reach_reply[0]) [$ci]\n");
            sl_send_reply("488", "Server error");
            exit;
    }
}

route[AGENT_TO_AGENT] {
    $var(block_name) = "AGENT_TO_AGENT";
    MACRO_LOG_REACH_ROUTE_BLOCK
    route(LOCATION);
}

route[AGENT_TO_MEDIA] {
    $var(block_name) = "AGENT_TO_MEDIA";
    MACRO_LOG_REACH_ROUTE_BLOCK
    $ru = "sip:" + $rU + "@" + $erl_xbuff(reach_reply[1]);
    append_hf("X-AUTH-IP: $si\r\n");
    dlg_setflag(DLG_TO_MEDIA);
    t_on_reply("REPLY_FROM_MEDIA");
    route(RELAY);
}

route[AGENT_TO_REGISTRAR] {
    $var(block_name) = "AGENT_TO_REGISTRAR";
    MACRO_LOG_REACH_ROUTE_BLOCK
    $ru = "sip:" + $rU + "@" + $erl_xbuff(reach_reply[1]);
    route(RELAY);
}

route[AGENT_TO_WORLD] {
    $var(block_name) = "AGENT_TO_WORLD";
    MACRO_LOG_REACH_ROUTE_BLOCK
    route(RELAY);
}

route[MEDIA_TO_AGENT] {
    $var(block_name) = "MEDIA_TO_AGENT";
    MACRO_LOG_REACH_ROUTE_BLOCK
    remove_hf("Allow-Events"); 
    remove_hf("X-FS-Support");
    remove_hf("Remote-Party-ID");
    if(has_body("application/sdp")) {
        xinfo("[ $rm ] FIX in [MEDIA_TO_AGENT] Fix nated SDP, strategy 2\n");
        # setflag(FLT_SKIP_SDP);
        fix_nated_sdp("2", IP_EXTERNAL_STRING);
    }
    dlg_setflag(DLG_FROM_MEDIA);
    route(LOCATION);
}

route[MEDIA_TO_MEDIA] {
    $var(block_name) = "MEDIA_TO_MEDIA";
    MACRO_LOG_REACH_ROUTE_BLOCK
    route(RELAY);
}

route[MEDIA_TO_REGISTRAR] {
    $var(block_name) = "MEDIA_TO_REGISTRAR";
    MACRO_LOG_REACH_ROUTE_BLOCK
    route(RELAY);
}

route[MEDIA_TO_GATEWAY] {
    $var(block_name) = "MEDIA_TO_GATEWAY";
    MACRO_LOG_REACH_ROUTE_BLOCK
    $ru = "sip:" + $rU + "@" + $erl_xbuff(reach_reply[1]);
    if(has_body("application/sdp")) {
        xinfo("[ $rm ] FIX in [MEDIA_TO_GATEWAY] Fix nated SDP, strategy 2\n");
        fix_nated_sdp("2", IP_EXTERNAL_STRING);
    }
    route(RELAY);
}

route[MEDIA_TO_WORLD] {
    $var(block_name) = "MEDIA_TO_WORLD";
    MACRO_LOG_REACH_ROUTE_BLOCK
 #   $ru = "sip:" + $rU + "@" + $erl_xbuff(reach_reply[1]);
    if(has_body("application/sdp")) {
        xinfo("[ $rm ] FIX in [MEDIA_TO_WORLD] Fix nated SDP, strategy 2\n");
        fix_nated_sdp("2", IP_EXTERNAL_STRING);
    }
    route(RELAY);
}

route[WORLD_TO_MEDIA] {
    $var(block_name) = "WORLD_TO_MEDIA";
    MACRO_LOG_REACH_ROUTE_BLOCK
    append_hf("X-REACH-DOMAIN: $rd\r\n");
    $ru = "sip:" + $rU + "@" + $erl_xbuff(reach_reply[1]);
    # $du = $ru;
    append_hf("X-AUTH-IP: $si\r\n");
    t_on_reply("REPLY_FROM_MEDIA");
    route(RELAY);
}

route[GATEWAY_TO_MEDIA] {
    $var(block_name) = "GATEWAY_TO_MEDIA";
    MACRO_LOG_REACH_ROUTE_BLOCK
    $ru = "sip:" + $rU + "@" + $erl_xbuff(reach_reply[1]);
    append_hf("X-AUTH-IP: $si\r\n");
    t_on_reply("REPLY_FROM_MEDIA");
    route(RELAY);
}

# Main SIP reply routing logic
reply_route {

    if ($Ri == IP_INTERNAL_STRING) {
        LOG_OUTGOING_REPLY
    }
    else {
        LOG_INCOMING_REPLY
    }

#!ifdef WITH_PACKETS    
    MACRO_LOG_FULL_REPLY_PACKET
#!endif
}

onreply_route[REPLY_FROM_WORLD] {
    
    if(status=~"[12][0-9][0-9]") {
        # !!! this fix is wrong - we should not manipulate Contact header,
        # it can cause wrong (loose) routing of subsequent in dialog
        # requests ... wrongly routed (and missing) ACK caused some Polycoms
        # cannot progress with transaction
        # if (nat_uac_test("1") && $sel(cfg_get.local.fix_inbound_nated_sdp)) {
        #     xinfo("$ci $si:$sp $rm ONREPLY fix_nated_contact \n");
        #     fix_nated_contact();
        # }
        if (has_body("application/sdp") && nat_uac_test("8")) {
            xinfo("$ci $si:$sp $rm ONREPLY fix_nated_sdp\n");
            fix_nated_sdp("2");
        }
    }
    xinfo("[ $rs $rr ] RELAY to (2nd via) $(sel(via[2]){s.select,0,;})\n");
}

onreply_route[REPLY_FROM_MEDIA] {

    # somewhere here add topology hiding code
    # perhaps use dialog vars for that

    if(status=~"[12][0-9][0-9]") {
        if(has_body("application/sdp")) {
            xinfo("[ $rs $rr ] FIX in [REPLY_FROM_MEDIA] Fix nated SDP, strategy 2\n");
            setflag(FLT_SKIP_SDP);
            fix_nated_sdp("2", IP_EXTERNAL_STRING);
        }
        remove_hf("Allow-Events"); 
        remove_hf("X-FS-Support");
    }

    xinfo("[ $rs $rr ] RELAY to (2nd via) $(sel(via[2]){s.select,0,;})\n");
}

event_route[usrloc:contact-expired] {
    $erl_list(expired) = $ulc(exp=>domain);
    $erl_list(expired) = $ulc(exp=>aor);
    erl_rpc("kamailio", "expired", "$erl_list(expired)", "$erl_xbuff(expired_reply)");
}

event_route[dialog:start] {
    $erl_list(dlg) = $rd;
    $erl_list(dlg) = $rU;
    $erl_list(dlg) = $dlg(to_uri);
    $erl_list(dlg) = $si;
    $erl_list(dlg) = $fd;
    $erl_list(dlg) = $fU;
    $erl_list(dlg) = $dlg(callid);
    erl_rpc("kamailio", "dialog_start", "$erl_list(dlg)", "$erl_xbuff(dlg_reply)");
}

event_route[dialog:end] {
    $erl_list(dlg) = $rd;
    $erl_list(dlg) = $rU;
    $erl_list(dlg) = $dlg(to_uri);
    $erl_list(dlg) = $si;
    $erl_list(dlg) = $fd;
    $erl_list(dlg) = $fU;
    $erl_list(dlg) = $dlg(callid);
    erl_rpc("kamailio", "dialog_end", "$erl_list(dlg)", "$erl_xbuff(dlg_reply)");
}

event_route[dialog:failed] {
    $erl_list(dlg) = $rd;
    $erl_list(dlg) = $rU;
    $erl_list(dlg) = $dlg(to_uri);
    $erl_list(dlg) = $si;
    $erl_list(dlg) = $fd;
    $erl_list(dlg) = $fU;
    $erl_list(dlg) = $dlg(callid);
    erl_rpc("kamailio", "dialog_failed", "$erl_list(dlg)", "$erl_xbuff(dlg_reply)");
}

# onsend_route {
#     # xnotice("\n**** ONSEND ROUTE ****\n");
#     # xnotice("\n$C(bx)$mb$C(xx)\n");
#     return;

# }